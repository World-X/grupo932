---
import GlobalStyles from '@components/GlobalStyles.astro'
import '@fontsource/roboto/400.css'
import '@fontsource/roboto/500.css'
import '@fontsource/roboto/700.css'
import ImageWrapper from '@components/misc/ImageWrapper.astro'

import { profileConfig, siteConfig } from '@/config'
import ConfigCarrier from '@components/ConfigCarrier.astro'
import {
  AUTO_MODE,
  DARK_MODE,
  DEFAULT_THEME,
  LIGHT_MODE,
} from '../constants/constants'
import { defaultFavicons } from '../constants/icon'
import type { Favicon } from '../types/config'
import { url, pathsEqual } from '../utils/url-utils'

import { ViewTransitions } from 'astro:transitions'

interface Props {
  title?: string
  banner?: string
  description?: string
  lang?: string
}

let { title, banner, description, lang } = Astro.props

// apply a class to the body element to decide the height of the banner, only used for initial page load
// Swup can update the body for each page visit, but it's after the page transition, causing a delay for banner height change
// so use Swup hooks instead to change the height immediately when a link is clicked
const isHomePage = pathsEqual(Astro.url.pathname, url('/'))

// defines global css variables
// why doing this in Layout instead of GlobalStyles: https://github.com/withastro/astro/issues/6728#issuecomment-1502203757
const configHue = siteConfig.themeColor.hue
if (!banner || typeof banner !== 'string' || banner.trim() === '') {
  banner = siteConfig.banner.src
}

// TODO don't use post cover as banner for now
banner = siteConfig.banner.src

const enableBanner = siteConfig.banner.enable

let pageTitle: string
if (title) {
  pageTitle = `${title} - ${siteConfig.title}`
} else {
  pageTitle = `${siteConfig.title} - ${siteConfig.subtitle}`
}

const favicons: Favicon[] =
  siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons

// const siteLang = siteConfig.lang.replace('_', '-')
if (!lang) {
  lang = `${siteConfig.lang}`
}
const siteLang = lang.replace('_', '-')
---

<!DOCTYPE html>
<html lang={siteLang} class="bg-[var(--page-bg)] transition text-[14px] md:text-[16px]">
	<head>

		<title>{pageTitle}</title>

		<meta charset="UTF-8" />
		<meta name="description" content={description || pageTitle}>
		<meta name="author" content={profileConfig.name}>

		<meta property="og:site_name" content={siteConfig.title}>
		<meta property="og:url" content={Astro.url}>
		<meta property="og:title" content={pageTitle}>
		<meta property="og:description" content={description || pageTitle}>

		<meta name="twitter:card" content="summary_large_image">
		<meta property="twitter:url" content={Astro.url}>
		<meta name="twitter:title" content={pageTitle}>
		<meta name="twitter:description" content={description || pageTitle}>

		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		{favicons.map(favicon => (
			<link rel="icon"
				  href={favicon.src.startsWith('/') ? url(favicon.src) : favicon.src}
				  sizes={favicon.sizes}
				  media={favicon.theme && `(prefers-color-scheme: ${favicon.theme})`}
			/>
		))}
		<!-- Set the theme before the page is rendered to avoid a flash -->
		<script is:inline define:vars={{DEFAULT_THEME: DEFAULT_THEME, LIGHT_MODE: LIGHT_MODE, DARK_MODE: DARK_MODE, AUTO_MODE: AUTO_MODE}}>
			const theme = localStorage.getItem('theme') || DEFAULT_THEME;
			switch (theme) {
				case LIGHT_MODE:
					document.documentElement.classList.remove('dark');
					break
				case DARK_MODE:
					document.documentElement.classList.add('dark');
					break
				case AUTO_MODE:
					if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
						document.documentElement.classList.add('dark');
					} else {
						document.documentElement.classList.remove('dark');
					}
			}
		</script>

		<slot name="head"></slot>

		<link rel="stylesheet" href="https://cdn.staticfile.net/KaTeX/0.16.9/katex.min.css" integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV" crossorigin="anonymous">

		<link rel="alternate" type="application/rss+xml" title={profileConfig.name} href={`${Astro.site}rss.xml`}/>

		<style define:vars={{ configHue }}></style>  <!-- defines global css variables. This will be applied to <html> <body> and some other elements idk why -->

		<ViewTransitions />
	</head>
	<body class=" min-h-screen transition " class:list={[{"is-home": isHomePage, "enable-banner": enableBanner}]}>
		<ConfigCarrier></ConfigCarrier>
		<GlobalStyles>
		<div id="banner-wrapper" class="absolute w-full transition-all duration-700">
			<ImageWrapper id="boxtest" alt="Banner image of the blog" class:list={["object-cover h-full", {"hidden": !siteConfig.banner.enable}]}
					  src={siteConfig.banner.src} position={siteConfig.banner.position}
			>
			</ImageWrapper>
		</div>
		<slot />
		</GlobalStyles>
	</body>
</html>
<style is:global>
	:root {
		--hue: var(--configHue);
		--page-width: 75rem;
	}
</style>
<style is:global>
@tailwind components;
@tailwind utilities;

@layer components {
	.enable-banner.is-home #banner-wrapper {
		@apply h-[var(--banner-height)] md:h-[var(--banner-height-home)]
	}
	.enable-banner #banner-wrapper {
		@apply h-[var(--banner-height)]
	}

	.enable-banner.is-home #top-row {
		@apply h-[calc(var(--banner-height)_-_4.5rem)] md:h-[calc(var(--banner-height-home)_-_4.5rem)]
	}
	.enable-banner #top-row {
		@apply h-[calc(var(--banner-height)_-_4.5rem)]
	}
}
</style>
<script>
import 'overlayscrollbars/overlayscrollbars.css';
import {
	OverlayScrollbars,
	// ScrollbarsHidingPlugin,
	// SizeObserverPlugin,
	// ClickScrollPlugin
} from 'overlayscrollbars';
import {getHue, getStoredTheme, setHue, setTheme} from "../utils/setting-utils";
import {pathsEqual, url} from "../utils/url-utils";

	/* Preload fonts */
// (async function() {
// 	try {
// 		await Promise.all([
// 			document.fonts.load("400 1em Roboto"),
// 			document.fonts.load("700 1em Roboto"),
// 		]);
// 		document.body.classList.remove("hidden");
// 	} catch (error) {
// 		console.log("Failed to load fonts:", error);
// 	}
// })();

/* TODO This is a temporary solution for style flicker issue when the transition is activated */
/* issue link: https://github.com/withastro/astro/issues/8711, the solution get from here too */
/* update: fixed in Astro 3.2.4 */
/*
function disableAnimation() {
	const css = document.createElement('style')
	css.appendChild(
		document.createTextNode(
			`*{
              -webkit-transition:none!important;
              -moz-transition:none!important;
              -o-transition:none!important;
              -ms-transition:none!important;
              transition:none!important
              }`
		)
	)
	document.head.appendChild(css)

	return () => {
		// Force restyle
		;(() => window.getComputedStyle(document.body))()

		// Wait for next tick before removing
		setTimeout(() => {
			document.head.removeChild(css)
		}, 1)
	}
}
*/

function setClickOutsideToClose(panel: string, ignores: string[]) {
	console.log(panel)
	document.addEventListener("click", event => {
		let panelDom = document.getElementById(panel);
		let tDom = event.target;
		if (!(tDom instanceof Node)) return;		// Ensure the event target is an HTML Node
		for (let ig of ignores) {
			let ie = document.getElementById(ig)
			if (ie == tDom || (ie?.contains(tDom))) {
				return;
			}
		}
		panelDom!.classList.add("float-panel-closed");
	});
}
setClickOutsideToClose("display-setting", ["display-setting", "display-settings-switch"])
setClickOutsideToClose("nav-menu-panel", ["nav-menu-panel", "nav-menu-switch"])
setClickOutsideToClose("search-panel", ["search-panel", "search-bar", "search-switch"])


function loadTheme() {
	const theme = getStoredTheme()
	setTheme(theme)
}

function loadHue() {
	setHue(getHue())
}

function initCustomScrollbar() {
	const bodyElement = document.querySelector('body');
	if (!bodyElement) return;
	OverlayScrollbars(
		// docs say that a initialization to the body element would affect native functionality like window.scrollTo
		// but just leave it here for now
		{
			target: bodyElement,
			cancel: {
				nativeScrollbarsOverlaid: true,    // don't initialize the overlay scrollbar if there is a native one
			}
		}, {
		scrollbars: {
			theme: 'scrollbar-base scrollbar-auto py-1',
			autoHide: 'move',
			autoHideDelay: 500,
			autoHideSuspend: false,
		},
	});
	document.querySelectorAll('pre').forEach((ele) => {
		OverlayScrollbars(ele, {
			scrollbars: {
				theme: 'scrollbar-base scrollbar-dark px-2',
				autoHide: 'leave',
				autoHideDelay: 500,
				autoHideSuspend: false
			}
		});
	});
}

function init() {
	// disableAnimation()()		// TODO
	loadTheme();
	loadHue();
	initCustomScrollbar();
	console.log("init layout");
	// if localStorage.subgroup is not set, set it to '1'
	if (!localStorage.subgroup) {
		localStorage.subgroup = '1';
		console.log("Subgroup set to 1");
	}
	if (!localStorage.read_posts) {
		let read_posts_arr: number[] = [];
		localStorage.read_posts = JSON.stringify(read_posts_arr);
		console.log("Read array created");
	}
}

/* Load settings when entering the site */
init();

/* Load settings before swapping */
/* astro:after-swap event happened before swap animation */
document.addEventListener('astro:after-swap', init);

const setup = () => {
	// TODO: temp solution to change the height of the banner
/*
	window.swup.hooks.on('animation:out:start', () => {
		const path = window.location.pathname
		const body = document.querySelector('body')
		if (path[path.length - 1] === '/' && !body.classList.contains('is-home')) {
			body.classList.add('is-home')
		} else if (path[path.length - 1] !== '/' && body.classList.contains('is-home')) {
			body.classList.remove('is-home')
		}
	})
*/
	// Remove the delay for the first time page load
	window.swup.hooks.on('link:click', () => {
		document.documentElement.style.setProperty('--content-delay', '0ms')
	})
	window.swup.hooks.on('content:replace', initCustomScrollbar)
	window.swup.hooks.on('visit:start', (visit: {to: {url: string}}) => {
		// change banner height immediately when a link is clicked
		const bodyElement = document.querySelector('body')
		if (pathsEqual(visit.to.url, url('/'))) {
			bodyElement!.classList.add('is-home');
		} else {
			bodyElement!.classList.remove('is-home');
		}
	});

}
if (window?.swup?.hooks) {
	setup()
} else {
	document.addEventListener('swup:enable', setup)
}

</script>

<script>
import PhotoSwipeLightbox from "photoswipe/lightbox"
import "photoswipe/style.css"

let lightbox: PhotoSwipeLightbox
let pswp = import("photoswipe")

function createPhotoSwipe() {
	lightbox = new PhotoSwipeLightbox({
		gallery: ".custom-md img, #post-cover img",
		pswpModule: () => pswp,
		closeSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z"/></svg>',
		zoomSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M340-540h-40q-17 0-28.5-11.5T260-580q0-17 11.5-28.5T300-620h40v-40q0-17 11.5-28.5T380-700q17 0 28.5 11.5T420-660v40h40q17 0 28.5 11.5T500-580q0 17-11.5 28.5T460-540h-40v40q0 17-11.5 28.5T380-460q-17 0-28.5-11.5T340-500v-40Zm40 220q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l224 224q11 11 11 28t-11 28q-11 11-28 11t-28-11L532-372q-30 24-69 38t-83 14Zm0-80q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"/></svg>',
		padding: { top: 20, bottom: 20, left: 20, right: 20 },
		wheelToZoom: true,
		arrowPrev: false,
		arrowNext: false,
		imageClickAction: 'close',
		tapAction: 'close',
		doubleTapAction: 'zoom',
	})

	lightbox.addFilter("domItemData", (itemData, element) => {
		if (element instanceof HTMLImageElement) {
			itemData.src = element.src

			itemData.w = Number(element.naturalWidth || window.innerWidth)
			itemData.h = Number(element.naturalHeight || window.innerHeight)

			itemData.msrc = element.src
		}

		return itemData
	})

	lightbox.init()
}

const setup = () => {
	if (!lightbox) {
		createPhotoSwipe()
	}
	window.swup.hooks.on("page:view", () => {
		createPhotoSwipe()
	})

	window.swup.hooks.on(
		"content:replace",
		() => {
			lightbox?.destroy?.()
		},
		{ before: true },
	)
}

if (window.swup) {
	setup()
} else {
	document.addEventListener("swup:enable", setup)
}
</script>


<style is:global lang="stylus">
#banner-wrapper
	top: 0
	opacity: 1
.banner-closed
	#banner-wrapper
		top: -120px
		opacity: 0
</style>
<!-- SETUP FOR SCHEDULE -->
<script is:inline data-astro-rerun>
window.safety = 1;
if (!document.getElementById("schedule-settings-panel")) {
	window.safety = 0;
}

if (document.getElementById("slug-id")) {
	const id = parseInt(document.getElementById("slug-id").textContent);
	if (localStorage.read_posts) {
		let readPosts = JSON.parse(localStorage.read_posts);
		if (!readPosts.includes(id)) {
			console.log("Adding unread post with id: ", id);
			readPosts.push(id);
			localStorage.read_posts = JSON.stringify(readPosts);
		}
	}
}

function init() {
	if (window.safety == 0) {
		return;
	}
	console.log("Hello, World! FROM LAYOUT");
	applySubGroup(localStorage.getItem("subgroup") || '1');
	setupHours(window.matchMedia("(max-width: 768px)").matches);
	// hideSubjectData();

	// Call setupHours function when screen is resized
	console.log("window.resizeEventListener: ", window.removeEventListener);
	if (!window.removeEventListener) {
		window.removeEventListener = true;
		console.log("Adding resize event listener");
		window.addEventListener("resize", function () {
			console.log("Resized");
			setupHours(window.matchMedia("(max-width: 768px)").matches);
		});
	}

	// Update datetime-el element and keep it updated every second
	let datetimeEl = document.getElementById("datetime-el");
	let currentSubjectEl = document.getElementById("current-subject-el");
	let nextSubjectEl = document.getElementById("next-subject-el");
	let nextTimeEl = document.getElementById("next-time-el");
	let nextClassEl = document.getElementById("next-class-el");
	if (datetimeEl) {
		if (currentSubjectEl) {
			if (nextSubjectEl) {
				if (nextTimeEl) {
					if (nextClassEl) {
						setup(datetimeEl, currentSubjectEl, nextSubjectEl, nextTimeEl, nextClassEl);
					}
				}
			}
		}
	}
}

init();

function setup(datetimeEl, currentSubjectEl, nextSubjectEl, nextTimeEl, nextClassEl) {
	const updateDateTime = (first_time = false) => {
	// Format: "Día, HH:MM:SS", Día must start with a capital letter
	const days = ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"];
	const date = new Date();
	const day = days[date.getDay()];
	const hours = date.getHours().toString().padStart(2, "0");
	const minutes = date.getMinutes().toString().padStart(2, "0");
	const seconds = date.getSeconds().toString().padStart(2, "0");
	// If screen is medium or small, hide seconds
	if (window.matchMedia("(max-width: 768px)").matches) {
		datetimeEl.textContent = `${day}, ${hours}:${minutes}`;
		nextClassEl.textContent = "";
	} else {
		datetimeEl.textContent = `${day}, ${hours}:${minutes}:${seconds}`;
		nextClassEl.textContent = "Próxima clase en";
	}
	// Update current subject data
	const subjectData = getSubjectData(date.getDay() - 1, date.getHours());
	if (subjectData.name === "") {
		currentSubjectEl.textContent = "No hay clase";
	} else {
		currentSubjectEl.textContent = `${subjectData.name} (${subjectData.classroom})`;
	}

	if (first_time) {
		console.log("updateDateTime first time");
		console.log("date: ", date);
		console.log("subjectData: ", subjectData);
	}

	let newDate = new Date();
	newDate.setHours(newDate.getHours() + 1);
	newDate.setMinutes(0);
	newDate.setSeconds(0);
	let nextSubjectData = getSubjectData(newDate.getDay() - 1, newDate.getHours());
	if (nextSubjectData.name === "") {
		if (newDate.getHours() > 13) {
			newDate.setHours(newDate.getHours() + 24);
		}
		if (newDate.getDay() === 0) {
			newDate.setHours(newDate.getHours() + 24);
		} else if (newDate.getDay() === 6) {
			newDate.setHours(newDate.getHours() + 48);
		}
		newDate.setHours(13);
		nextSubjectData = getSubjectData(newDate.getDay() - 1, newDate.getHours());
	}
	nextSubjectEl.textContent = `${nextSubjectData.name} (${nextSubjectData.classroom})`;
	
	let delta = Math.abs(newDate - date) / 1000;
	const diffDays = Math.floor(delta / 86400);
	delta -= diffDays * 86400;
	const diffHours = Math.floor(delta / 3600) % 24;
	delta -= diffHours * 3600;
	const diffMinutes = Math.floor(delta / 60) % 60;
	delta -= diffMinutes * 60;
	const diffSeconds = Math.trunc(delta % 60);
	let nextTimeText = "";
	if (diffDays > 0) {
		nextTimeText = `${diffDays}d`;
		if (diffHours !== 0) {
			nextTimeText += ` y ${diffMinutes}m`;
		}
	} else if (diffHours > 0) {
		nextTimeText = `${diffHours}h`;
		if (diffMinutes !== 0) {
			nextTimeText += ` y ${diffMinutes}m`;
		}
	} else if (diffMinutes > 0) {
		nextTimeText = `${diffMinutes}m`;
		if (diffSeconds !== 0) {
			nextTimeText += ` y ${diffSeconds}s`;
		}
	} else {
		nextTimeText = `${diffSeconds}s`;
	}
	nextTimeEl.textContent = nextTimeText;
};
updateDateTime(true);
setInterval(updateDateTime, 1000);
}


// Muestra el dia de la semana (Lunes, Martes, etc.)
// document.getElementById("date-element").textContent = new Date().toLocaleDateString("es-ES", { weekday: "long" });

function setupHours(is_screen_medium) {
	if (window.safety == 0) {
		return;
	}
	// Get all elements with "hour" class, IF screen is medium, set their content to an hour (from 13:00 to 19:00), ELSE set their content to an hour (from 13:00 to 19:00) and a dash followed by the next hour
	let hours = document.getElementsByClassName("hour");
	if (hours) {
		for (let i = 0; i < hours.length; i++) {
			let hour = hours[i];
			if (is_screen_medium) {
				hour.textContent = `${13 + i}:00`;
			} else {
				hour.textContent = `${13 + i}:00 - ${14 + i}:00`;
			}
		}
	}
}

function scheduleSwitchButton() {
	if (window.safety == 0) {
		return;
	}
	let panel = document.getElementById("schedule-settings-panel");
	let scheduleSettingsIcon = document.getElementById("schedule-settings-icon");
	const settingsSVG = "M10.825 22q-.675 0-1.162-.45t-.588-1.1L8.85 18.8q-.325-.125-.612-.3t-.563-.375l-1.55.65q-.625.275-1.25.05t-.975-.8l-1.175-2.05q-.35-.575-.2-1.225t.675-1.075l1.325-1Q4.5 12.5 4.5 12.337v-.675q0-.162.025-.337l-1.325-1Q2.675 9.9 2.525 9.25t.2-1.225L3.9 5.975q.35-.575.975-.8t1.25.05l1.55.65q.275-.2.575-.375t.6-.3l.225-1.65q.1-.65.588-1.1T10.825 2h2.35q.675 0 1.163.45t.587 1.1l.225 1.65q.325.125.613.3t.562.375l1.55-.65q.625-.275 1.25-.05t.975.8l1.175 2.05q.35.575.2 1.225t-.675 1.075l-1.325 1q.025.175.025.338v.674q0 .163-.05.338l1.325 1q.525.425.675 1.075t-.2 1.225l-1.2 2.05q-.35.575-.975.8t-1.25-.05l-1.5-.65q-.275.2-.575.375t-.6.3l-.225 1.65q-.1.65-.587 1.1t-1.163.45zm1.225-6.5q1.45 0 2.475-1.025T15.55 12t-1.025-2.475T12.05 8.5q-1.475 0-2.488 1.025T8.55 12t1.013 2.475T12.05 15.5";
	const closeSVG = "m12 13.4l-4.9 4.9q-.275.275-.7.275t-.7-.275t-.275-.7t.275-.7l4.9-4.9l-4.9-4.9q-.275-.275-.275-.7t.275-.7t.7-.275t.7.275l4.9 4.9l4.9-4.9q.275-.275.7-.275t.7.275t.275.7t-.275.7L13.4 12l4.9 4.9q.275.275.275.7t-.275.7t-.7.275t-.7-.275z";
	if (panel) {
		if (panel.style.display === "none") {
			panel.style.display = "block";
			if (scheduleSettingsIcon) {
				scheduleSettingsIcon.getElementsByTagName("path")[0].setAttribute("d", closeSVG);
			}
		} else {
			panel.style.display = "none";
			if (scheduleSettingsIcon) {
				scheduleSettingsIcon.getElementsByTagName("path")[0].setAttribute("d", settingsSVG);
			}
		}
	}
}

function setSubGroup(subgroup) {
	if (window.safety == 0) {
		return;
	}
	localStorage.setItem("subgroup", subgroup);
	applySubGroup(subgroup);
}

function applySubGroup(subgroup) {
	if (window.safety == 0) {
		return;
	}
	console.log("Applying subgroup: ", subgroup);
	// Buttons for subgroup selection
	let buttonOne = document.getElementById("subgroup-one-button");
	let buttonTwo = document.getElementById("subgroup-two-button");
	// Buttons for subject selection
	let subPeOdlc = document.getElementById("sub-pe-odlc");
	let subEaLc = document.getElementById("sub-ea-lc");
	let subLcEa = document.getElementById("sub-lc-ea");
	let subOdlcPe = document.getElementById("sub-odlc-pe");
	// Get current day and hour (to prevent errors, we will have to check first if the elements exist)
	let currentDayElement = document.getElementById("current-day-selected-var");
	let currentHourElement = document.getElementById("current-hour-selected-var");
	let currentDay = -1;
	let currentHour = -1;
	if (currentDayElement) {
		currentDay = parseInt(currentDayElement.textContent || "-1");
	}
	if (currentHourElement) {
		currentHour = parseInt(currentHourElement.textContent || "-1");
	}
	if (buttonOne) {
		if (buttonTwo) {
			if (subgroup == '1') {
				console.log("Subgroup 1");
				// Change button styles
				buttonOne.classList.add("current-theme-btn");
				buttonTwo.classList.remove("current-theme-btn");
				// Change subject buttons
				if (subPeOdlc) {
					subPeOdlc.classList.remove("odlc");
					subPeOdlc.classList.add("pe");
					subPeOdlc.getElementsByTagName("button")[0].textContent = "Programación Estructurada";
				}
				if (subEaLc) {
					subEaLc.classList.remove("lc");
					subEaLc.classList.add("ea");
					subEaLc.getElementsByTagName("button")[0].textContent = "Estadística Avanzada";
				}
				if (subLcEa) {
					subLcEa.classList.remove("ea");
					subLcEa.classList.add("lc");
					subLcEa.getElementsByTagName("button")[0].textContent = "Lenguaje C";
				}
				if (subOdlcPe) {
					subOdlcPe.classList.remove("pe");
					subOdlcPe.classList.add("odlc");
					subOdlcPe.getElementsByTagName("button")[0].textContent = "Organización de las Computadoras";
				}
			} else if (subgroup == '2') {
				console.log("Subgroup 2");
				// Change button styles
				buttonOne.classList.remove("current-theme-btn");
				buttonTwo.classList.add("current-theme-btn");
				// Change subject buttons
				if (subPeOdlc) {
					subPeOdlc.classList.remove("pe");
					subPeOdlc.classList.add("odlc");
					subPeOdlc.getElementsByTagName("button")[0].textContent = "Organización de las Computadoras";
				}
				if (subEaLc) {
					subEaLc.classList.remove("ea");
					subEaLc.classList.add("lc");
					subEaLc.getElementsByTagName("button")[0].textContent = "Lenguaje C";
				}
				if (subLcEa) {
					subLcEa.classList.remove("lc");
					subLcEa.classList.add("ea");
					subLcEa.getElementsByTagName("button")[0].textContent = "Estadística Avanzada";
				}

				if (subOdlcPe) {
					subOdlcPe.classList.remove("odlc");
					subOdlcPe.classList.add("pe");
					subOdlcPe.getElementsByTagName("button")[0].textContent = "Programación Estructurada";
				}
			} else {
				console.error("Invalid subgroup: ", subgroup);
			}
		}
	}
	if (currentDay != -1 && currentHour != -1) {
		showSubjectData(currentDay, currentHour, false);
	}
}

// NOTE: Will refactor this code, so functions regarding subjectData take a day and hour parameters instead of a subject id number

function getSubjectData(day = 0, hour = 13) {
	if (window.safety == 0) {
		return;
	}
	const DEFAULT_SUBJECT_DATA = {
		tag: "none",
		name: "",
		hour: "Hour",
		teacher: "Teacher",
		classroom: "Ninguna",
		subgroup: "Subgroup",
		type: "Type"
	};
	switch (day) {
		case 0: // Monday
			switch (hour) {
				case 13: // 13:00 or 1:00PM
					return {
						tag: "lc",
						name: "Lenguaje C",
						hour: "13:00 - 14:00",
						teacher: "Antillón Macías César",
						classroom: "E45 - 301",
						subgroup: "Ambos",
						type: "Clase"
					};
				case 14: case 15: // 14:00 or 2:00PM
					return {
						tag: "tys",
						name: "Tecnología y Sociedad",
						hour: "14:00 - 16:00",
						teacher: "Rangel Lopez Claudia Margarita",
						classroom: "E45 - 301",
						subgroup: "Ambos",
						type: "Taller"
					};
				case 16: case 17: // 16:00 or 4:00PM
					return {
						tag: "pe",
						name: "Programación Estructurada",
						hour: "16:00 - 18:00",
						teacher: "Nuñez Yepiz Pedro",
						classroom: "E45 - 301",
						subgroup: "Ambos",
						type: "Taller"
					}
				default:
					return DEFAULT_SUBJECT_DATA;
			}
		case 1: // Tuesday
			switch (hour) {
				case 13: case 14: // 13:00 or 1:00PM
					return {
						tag: "ea",
						name: "Estadística Avanzada",
						hour: "13:00 - 15:00",
						teacher: "Nieto Hipólito Juan Iván",
						classroom: "E45 - 301",
						subgroup: "Ambos",
						type: "Clase"
					};
				case 15: // 15:00 or 3:00PM
					return {
						tag: "mdli",
						name: "Metodología de la Investigación",
						hour: "15:00 - 16:00",
						teacher: "López Sánchez Carlos Saul",
						classroom: "E45 - 301",
						subgroup: "Ambos",
						type: "Clase"
					};
				case 16: case 17: // 16:00 or 4:00PM
					if (localStorage.getItem("subgroup") == '1') {
						return {
							tag: "pe",
							name: "Programación Estructurada",
							hour: "16:00 - 18:00",
							teacher: "Nuñez Yepiz Pedro",
							classroom: "E40 - A",
							subgroup: "1",
							type: "Laboratorio"
						}
					} else {
						return {
							tag: "odlc",
							name: "Organización de las Computadoras",
							hour: "16:00 - 18:00",
							teacher: "Crespo Ragland Jonatan",
							classroom: "E40 - B",
							subgroup: "2",
							type: "Laboratorio"
						};
					}
				default:
					return DEFAULT_SUBJECT_DATA;
			}
		case 2: // Wednesday
			switch (hour) {
				case 13: case 14: // 13:00 or 1:00PM
					if (localStorage.getItem("subgroup") == '1') {
						return {
							tag: "ea",
							name: "Estadística Avanzada",
							hour: "13:00 - 15:00",
							teacher: "Nieto Hipólito Juan Iván",
							classroom: "E40 - C",
							subgroup: "1",
							type: "Laboratorio"
						};
					} else {
						return {
							tag: "lc",
							name: "Lenguaje C",
							hour: "13:00 - 15:00",
							teacher: "Antillón Macías César",
							classroom: "E40 - B",
							subgroup: "2",
							type: "Laboratorio"
						};
					}
				case 15: case 16: // 15:00 or 3:00PM
					if (localStorage.getItem("subgroup") == '1') {
						return {
							tag: "lc",
							name: "Lenguaje C",
							hour: "15:00 - 17:00",
							teacher: "Antillón Macías César",
							classroom: "E40 - C",
							subgroup: "1",
							type: "Laboratorio"
						};
					} else {
						return {
							tag: "ea",
							name: "Estadística Avanzada",
							hour: "15:00 - 17:00",
							teacher: "Nieto Hipólito Juan Iván",
							classroom: "E34 - LCO - ARQUITECTURA",
							subgroup: "2",
							type: "Laboratorio"
						};
					}
				case 17: case 18: // 17:00 or 5:00PM
					return {
						tag: "odlc",
						name: "Organización de las Computadoras",
						hour: "17:00 - 19:00",
						teacher: "Crespo Ragland Jonatan",
						classroom: "E1 - 207",
						subgroup: "Ambos",
						type: "Clase"
					};
				default:
					return DEFAULT_SUBJECT_DATA;
			}
		case 3: // Thursday
			switch (hour) {
				case 13: case 14: // 13:00 or 1:00PM
					if (localStorage.getItem("subgroup") == '1') {
						return {
							tag: "odlc",
							name: "Organización de las Computadoras",
							hour: "13:00 - 15:00",
							teacher: "Crespo Ragland Jonatan",
							classroom: "E40 - B",
							subgroup: "1",
							type: "Laboratorio"
						};
					} else {
						return {
							tag: "pe",
							name: "Programación Estructurada",
							hour: "13:00 - 15:00",
							teacher: "Nuñez Yepiz Pedro",
							classroom: "E40 - A",
							subgroup: "2",
							type: "Laboratorio"
						};
					}
				case 15: // 15:00 or 3:00PM
					return {
						tag: "tys",
						name: "Tecnología y Sociedad",
						hour: "15:00 - 16:00",
						teacher: "Rangel Lopez Claudia Margarita",
						classroom: "E1 - 305",
						subgroup: "Ambos",
						type: "Clase"
					};
				case 16: // 16:00 or 4:00PM
					return {
						tag: "hu",
						name: "Hora Universitaria",
						hour: "16:00 - 17:00",
						teacher: "",
						classroom: "",
						subgroup: "",
						type: ""
					};
				case 17: case 18: // 17:00 or 5:00PM
					return {
						tag: "md",
						name: "Matemáticas Discretas",
						hour: "17:00 - 19:00",
						teacher: "Crespo Ragland Jonatan",
						classroom: "E1 - 301",
						subgroup: "Ambos",
						type: "Clase"
					};
				default:
					return DEFAULT_SUBJECT_DATA;
			}
		case 4: // Friday
			switch (hour) {
				case 13: case 14: // 13:00 or 1:00PM
					return {
						tag: "lc",
						name: "Lenguaje C",
						hour: "13:00 - 15:00",
						teacher: "Antillón Macías César",
						classroom: "E1 - 209",
						subgroup: "Ambos",
						type: "Taller"
					};
				case 15: case 16: // 15:00 or 3:00PM
					return {
						tag: "mdli",
						name: "Metodología de la Investigación",
						hour: "15:00 - 17:00",
						teacher: "López Sánchez Carlos Saul",
						classroom: "E1 - 209",
						subgroup: "Ambos",
						type: "Taller"
					};
				case 17: case 18: // 17:00 or 5:00PM
					return {
						tag: "md",
						name: "Matemáticas Discretas",
						hour: "17:00 - 19:00",
						teacher: "Crespo Ragland Jonatan",
						classroom: "E1 - 209",
						subgroup: "Ambos",
						type: "Taller"
					};
				default:
					return DEFAULT_SUBJECT_DATA;
			}
		default:
			return DEFAULT_SUBJECT_DATA;
	}
}

function updateSubjectDataPanel(subject_data, day) {
	if (window.safety == 0) {
		return;
	}
	let subjectDataName = document.getElementById("subject-data-name");
	let subjectDataDay = document.getElementById("subject-data-day");
	let subjectDataHour = document.getElementById("subject-data-hour");
	let subjectDataTeacher = document.getElementById("subject-data-teacher");
	let subjectDataClassroom = document.getElementById("subject-data-classroom");
	let subjectDataSubgroup = document.getElementById("subject-data-subgroup");
	let subjectDataType = document.getElementById("subject-data-type");
	if (subject_data) {
		if (subjectDataName) {
			subjectDataName.textContent = subject_data.name;
		}
		if (subjectDataDay) {
			subjectDataDay.textContent = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes"][day];
		}
		if (subjectDataHour) {
			subjectDataHour.textContent = subject_data.hour;
		}
		if (subject_data.teacher == "") {
			let subjectDataTeacherDIV = document.getElementById("subject-data-teacher-div");
			if (subjectDataTeacherDIV) {
				subjectDataTeacherDIV.style.display = "none";
			}
		} else {
			let subjectDataTeacherDIV = document.getElementById("subject-data-teacher-div");
			if (subjectDataTeacherDIV) {
				if (subjectDataTeacher) {
					subjectDataTeacher.textContent = subject_data.teacher;
				}
				subjectDataTeacherDIV.style.display = "flex";
			}
		}
		if (subject_data.classroom == "") {
			let subjectDataClassroomDIV = document.getElementById("subject-data-classroom-div");
			if (subjectDataClassroomDIV) {
				subjectDataClassroomDIV.style.display = "none";
			}
		} else {
			let subjectDataClassroomDIV = document.getElementById("subject-data-classroom-div");
			if (subjectDataClassroomDIV) {
				if (subjectDataClassroom) {
					subjectDataClassroom.textContent = subject_data.classroom;
				}
				subjectDataClassroomDIV.style.display = "flex";
			}
		}
		if (subject_data.subgroup == "") {
			let subjectDataSubgroupDIV = document.getElementById("subject-data-subgroup-div");
			if (subjectDataSubgroupDIV) {
				subjectDataSubgroupDIV.style.display = "none";
			}
		} else {
			let subjectDataSubgroupDIV = document.getElementById("subject-data-subgroup-div");
			if (subjectDataSubgroupDIV) {
				if (subjectDataSubgroup) {
					subjectDataSubgroup.textContent = subject_data.subgroup;
				}
				subjectDataSubgroupDIV.style.display = "flex";
			}
		}
		if (subject_data.type == "") {
			let subjectDataTypeDIV = document.getElementById("subject-data-type-div");
			if (subjectDataTypeDIV) {
				subjectDataTypeDIV.style.display = "none";
			}
		} else {
			let subjectDataTypeDIV = document.getElementById("subject-data-type-div");
			if (subjectDataTypeDIV) {
				if (subjectDataType) {
					subjectDataType.textContent = subject_data.type;
				}
				subjectDataTypeDIV.style.display = "flex";
			}
		}
	}
}

function showSubjectData(day = 0, hour = 13, display = true) {
	if (window.safety == 0) {
		return;
	}
	const SUBJECT_DATA = getSubjectData(day, hour);
	updateSubjectDataPanel(SUBJECT_DATA, day);
	let subjectDataPanel = document.getElementById("subject-data-panel");
	let currentDaySelectedVar = document.getElementById("current-day-selected-var");
	let currentHourSelectedVar = document.getElementById("current-hour-selected-var");
	let subjectDataPreLineBreak = document.getElementById("subject-data-pre-line-break");
	if (subjectDataPreLineBreak) {
		if (display) {
			console.log("Debug: Showing pre-line break!");
			subjectDataPreLineBreak.style.display = "inline";
		}
	}
	if (subjectDataPanel) {
		if (display) {
			subjectDataPanel.style.display = "block";
		}
		removeSubjectDataClasses(subjectDataPanel);
		if (SUBJECT_DATA.tag) {
			subjectDataPanel.classList.add(SUBJECT_DATA.tag);
		}
		if (subjectDataPanel.getBoundingClientRect().bottom > window.innerHeight) {
			subjectDataPanel.scrollIntoView({ behavior: "smooth", block: "end" });
		}
	}
	if (currentDaySelectedVar) {
		// convert day to string first
		currentDaySelectedVar.textContent = day.toString();
	}
	if (currentHourSelectedVar) {
		// convert hour to string first
		currentHourSelectedVar.textContent = hour.toString();
	}
}

function hideSubjectData() {
	if (window.safety == 0) {
		return;
	}
	let subjectDataPanel = document.getElementById("subject-data-panel");
	let subjectDataPreLineBreak = document.getElementById("subject-data-pre-line-break");
	if (subjectDataPanel) {
		subjectDataPanel.style.display = "none";
		removeSubjectDataClasses(subjectDataPanel);
	}
	if (subjectDataPreLineBreak) {
		console.log("Debug: Hiding pre-line break!");
		subjectDataPreLineBreak.style.display = "none";
	}
}

function removeSubjectDataClasses(subjectDataPanel) {
	if (window.safety == 0) {
		return;
	}
	if (subjectDataPanel) {
		subjectDataPanel.classList.remove("lc", "tys", "pe", "ea", "mdli", "odlc", "hu", "md");
	}
}
</script>
